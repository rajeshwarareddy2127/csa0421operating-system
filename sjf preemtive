
input:
#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 10

struct Process {
    int pid;
    int arrival_time;
    int burst_time;
    int priority;
    int completion_time;
    int turnaround_time;
    int waiting_time;
    bool processed;
};

void calculateTimes(struct Process *processes, int n) {
    int current_time = 0;
    int completed = 0;
    
    while (completed != n) {
        int highest_priority = 99999; // Initialize to a large value
        int selected_process = -1;
        
        for (int i = 0; i < n; i++) {
            if (!processes[i].processed && processes[i].arrival_time <= current_time && processes[i].priority < highest_priority) {
                highest_priority = processes[i].priority;
                selected_process = i;
            }
        }
        
        if (selected_process == -1) {
            current_time++;
            continue;
        }
        
        processes[selected_process].burst_time--;
        current_time++;
        
        if (processes[selected_process].burst_time == 0) {
            // Set completion time
            processes[selected_process].completion_time = current_time;
            // Set turnaround time
            processes[selected_process].turnaround_time = processes[selected_process].completion_time - processes[selected_process].arrival_time;
            // Set waiting time
            processes[selected_process].waiting_time = processes[selected_process].turnaround_time - processes[selected_process].burst_time;
            // Mark as processed
            processes[selected_process].processed = true;
            // Increment completed count
            completed++;
        }
    }
}

void displayResults(struct Process *processes, int n) {
    printf("Process\t Arrival Time\t Burst Time\t Priority\t Completion Time\t Turnaround Time\t Waiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t %d\t\t %d\t\t %d\t\t %d\t\t\t %d\t\t\t %d\n", 
            processes[i].pid, 
            processes[i].arrival_time, 
            processes[i].burst_time, 
            processes[i].priority, 
            processes[i].completion_time, 
            processes[i].turnaround_time, 
            processes[i].waiting_time);
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[MAX_PROCESSES];
    
    // Input process details
    printf("Enter arrival time, burst time, and priority for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        processes[i].pid = i + 1;
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        processes[i].processed = false;
    }

    // Calculate completion, turnaround, and waiting times
    calculateTimes(processes, n);

    // Display results
    displayResults(processes, n);

    return 0;
}


output:
Process 1:
Arrival Time: 0
Burst Time: 4
Priority: 2
Process 2:
Arrival Time: 1
Burst Time: 3
Priority: 3
Process 3:
Arrival Time: 2
Burst Time: 1
Priority: 4
Process 4:
Arrival Time: 3
Burst Time: 5
Priority: 5
Process 5:
Arrival Time: 4
Burst Time: 2
Priority: 5
Process  Arrival Time    Burst Time      Priority        Completion Time         Turnaround Time         Waiting Time
1                0               0               2               4                       4                       4
2                1               0               3               7                       6                       6
3                2               0               4               8                       6                       6
4                3               0               5               13                      10                      10
5                4               0               5               15                      11                      11
