input:
#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 10

typedef struct {
    int pid;
    int priority;
} Process;

typedef struct {
    Process processes[MAX_PROCESSES];
    int size;
} PriorityQueue;

void swap(Process *a, Process *b) {
    Process temp = *a;
    *a = *b;
    *b = temp;
}

void insertProcess(PriorityQueue *pq, int pid, int priority) {
    if (pq->size >= MAX_PROCESSES) {
        printf("Priority queue is full\n");
        return;
    }

    Process new_process;
    new_process.pid = pid;
    new_process.priority = priority;
    pq->processes[pq->size++] = new_process;

    // Maintain max-heap property
    int i = pq->size - 1;
    while (i > 0 && pq->processes[(i - 1) / 2].priority < pq->processes[i].priority) {
        swap(&pq->processes[(i - 1) / 2], &pq->processes[i]);
        i = (i - 1) / 2;
    }
}

Process extractMax(PriorityQueue *pq) {
    if (pq->size <= 0) {
        printf("Priority queue is empty\n");
        Process p = {-1, -1};
        return p;
    }

    Process root = pq->processes[0];
    pq->processes[0] = pq->processes[--pq->size];

    // Maintain max-heap property
    int i = 0;
    while (i * 2 + 1 < pq->size) {
        int left = i * 2 + 1;
        int right = i * 2 + 2;
        int largest = i;

        if (left < pq->size && pq->processes[left].priority > pq->processes[largest].priority) {
            largest = left;
        }

        if (right < pq->size && pq->processes[right].priority > pq->processes[largest].priority) {
            largest = right;
        }

        if (largest != i) {
            swap(&pq->processes[i], &pq->processes[largest]);
            i = largest;
        } else {
            break;
        }
    }

    return root;
}

void scheduleProcesses(PriorityQueue *pq) {
    printf("Scheduling processes based on highest priority...\n");
    while (pq->size > 0) {
        Process p = extractMax(pq);
        printf("Executing process with PID: %d, Priority: %d\n", p.pid, p.priority);
    }
}

int main() {
    PriorityQueue pq;
    pq.size = 0;

    insertProcess(&pq, 1, 3);
    insertProcess(&pq, 2, 1);
    insertProcess(&pq, 3, 2);
    insertProcess(&pq, 4, 5);
    insertProcess(&pq, 5, 4);

    scheduleProcesses(&pq);

    return 0;
}

output:
Scheduling processes based on highest priority...
Executing process with PID: 4, Priority: 5
Executing process with PID: 5, Priority: 4
Executing process with PID: 1, Priority: 3
Executing process with PID: 3, Priority: 2
Executing process with PID: 2, Priority: 1
