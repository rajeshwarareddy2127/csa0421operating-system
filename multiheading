input:
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

// Function that will be executed by each thread
void* thread_function(void* arg) {
    int thread_id = *((int*)arg);
    printf("Thread %d: Starting\n", thread_id);
    sleep(1);  // Simulate some work with sleep
    printf("Thread %d: Finished\n", thread_id);
    return NULL;
}

int main() {
    int num_threads = 5;
    pthread_t threads[num_threads];
    int thread_ids[num_threads];

    // Create threads
    for (int i = 0; i < num_threads; i++) {
        thread_ids[i] = i + 1;
        if (pthread_create(&threads[i], NULL, thread_function, &thread_ids[i]) != 0) {
            perror("pthread_create");
            exit(EXIT_FAILURE);
        }
    }

    // Wait for all threads to finish
    for (int i = 0; i < num_threads; i++) {
        if (pthread_join(threads[i], NULL) != 0) {
            perror("pthread_join");
            exit(EXIT_FAILURE);
        }
    }

    printf("All threads have finished.\n");

    return 0;
}
output:
Thread 1: Starting
Thread 4: Starting
Thread 3: Starting
Thread 2: Starting
Thread 5: Starting
Thread 5: Finished
Thread 2: Finished
Thread 3: Finished
Thread 4: Finished
Thread 1: Finished
All threads have finished.
